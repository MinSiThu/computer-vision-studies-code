# -*- coding: utf-8 -*-
"""cv2 Contours.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qymgL5e_KDweUOJF_pmrjzMVgyS2KLTE
"""

import cv2
import matplotlib.pyplot as plt

!pip install imutils

img = cv2.imread("tetris-blocks.png")
plt.imshow(img)
plt.show()

gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
plt.imshow(gray)
plt.show()

"""
img : The gray image.
minVal : A minimum threshold, in our case 30 .
maxVal : The maximum threshold which is 150
"""
edged = cv2.Canny(gray, 30, 150) # edge dectection with canny algorithm
plt.imshow(edged)
plt.show()

# threshold the image by setting all pixel values less than 225
# to 255 (white; foreground) and all pixel values >= 225 to 255
# (black; background), thereby segmenting the image

"""
Grabbing all pixels in the gray image greater than 225 and setting them to 0 (black) which corresponds to the background of the image
Setting pixel vales less than 225 to 255 (white) which corresponds to the foreground of the image (i.e., the Tetris blocks themselves).
"""
thresh = cv2.threshold(gray, 225, 255, cv2.THRESH_BINARY_INV)[1]
plt.imshow(thresh)
plt.show()

import imutils

# find contours (i.e., outlines) of the foreground objects in the
# thresholded image
cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,
	cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)
output = img.copy()

for c in cnts:
	# draw each contour on the output image with a 3px thick purple
	# outline, then display the output contours one at a time
  cv2.drawContours(output, [c], -1, (200, 50, 120), 3)
  plt.imshow(output)
  plt.show()

mask = thresh.copy()
mask = cv2.erode(mask, None, iterations=5)
plt.imshow(mask)
plt.show()

mask = thresh.copy()
mask = cv2.dilate(mask,None,iterations=5)
plt.imshow(mask)
plt.show()

mask = thresh.copy()
output = cv2.bitwise_and(img, img, mask=mask)
plt.imshow(output)
plt.show()