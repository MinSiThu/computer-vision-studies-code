# -*- coding: utf-8 -*-
"""Image Segmentation with K Means Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RdmoEsygxQPicvxf0NTHR3dY9CLpRmG3
"""

import numpy as np
import cv2 
import matplotlib.pyplot as plt

image = cv2.imread("fruits.jpg")

plt.subplot(1,3,1)
plt.imshow(image)

plt.subplot(1,3,2)
plt.imshow(cv2.cvtColor(image,cv2.COLOR_RGB2BGR))

image = cv2.cvtColor(image,cv2.COLOR_RGB2BGR)
plt.subplot(1,3,3)
plt.imshow(cv2.cvtColor(image,cv2.COLOR_RGB2GRAY))

plt.show()

# reshape the image into single array with 3 colors
pixels = image.reshape((-1,3))
pixels = np.float32(pixels)
print(pixels.shape)

# define stopping criteria
# stop the iteration when 100 or criteria epsilon is 0.2
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)

K = 4 # Center Points
# https://docs.opencv.org/3.4/d1/d5c/tutorial_py_kmeans_opencv.html
compactness,labels,centers = cv2.kmeans(pixels,K,None,criteria,10,cv2.KMEANS_RANDOM_CENTERS) # 10 is attempts algoritm is executed

print(compactness)
print(labels)
print(centers)

centers = np.uint8(centers)
labels = labels.flatten()

print(centers)
print(labels)

segmented_image = centers[labels]
print(segmented_image)

segmented_image = segmented_image.reshape(image.shape)
plt.imshow(segmented_image)
plt.show()